{
    "version": 3,
    "sources": [
        "App.js",
        "serviceWorker.js",
        "index.js"
    ],
    "names": [
        "useStyles",
        "makeStyles",
        "theme",
        "root",
        "flexGrow",
        "appBarIcon",
        "display",
        "marginRight",
        "spacing",
        "title",
        "container",
        "flexDirection",
        "alignItems",
        "paddingTop",
        "paddingBottom",
        "stepTitle",
        "width",
        "marginTop",
        "marginBottom",
        "img",
        "placeholder_img_overlay",
        "position",
        "left",
        "right",
        "top",
        "bottom",
        "backgroundColor",
        "justifyContent",
        "label_box_container",
        "label_box",
        "borderStyle",
        "borderWidth",
        "borderColor",
        "LabelledBox",
        "label",
        "coords",
        "className",
        "style",
        "height",
        "padding",
        "App",
        "fileInputRef",
        "classes",
        "React",
        "useState",
        "step",
        "setStep",
        "file",
        "setFile",
        "fileURL",
        "setFileURL",
        "isUploading",
        "setUploading",
        "result",
        "setResult",
        "handleFileChange",
        "e",
        "f",
        "target",
        "files",
        "URL",
        "revokeObjectURL",
        "createObjectURL",
        "AppBar",
        "Toolbar",
        "Icon",
        "Typography",
        "variant",
        "marginLeft",
        "opacity",
        "type",
        "accept",
        "onChange",
        "disabled",
        "ref",
        "src",
        "alt",
        "Button",
        "color",
        "onClick",
        "data",
        "FormData",
        "append",
        "fetch",
        "SERVER_URL",
        "method",
        "body",
        "then",
        "response",
        "json",
        "interval",
        "setInterval",
        "a",
        "job_id",
        "r",
        "completed",
        "clearInterval",
        "alert",
        "catch",
        "size",
        "key",
        "labels",
        "map",
        "l",
        "i",
        "String",
        "scores",
        "toFixed",
        "boxes",
        "value",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "ReactDOM",
        "render",
        "StrictMode",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "registration",
        "unregister",
        "error",
        "console",
        "message"
    ],
    "mappings": "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",
    "file": "static/js/main.220922a7.chunk.js",
    "sourcesContent": [
        "import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport { Bounce, Spinner } from 'react-activity';\nimport 'react-activity/dist/react-activity.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  appBarIcon: {\n    display: 'flex',\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    paddingTop: 50,\n    paddingBottom: 50\n  },\n  stepTitle: {\n    width: '30%',\n    marginTop: 20,\n    marginBottom: 10\n  },\n  img: {\n    marginTop: 10\n  },\n  placeholder_img_overlay: {\n    position: 'absolute',\n    left: 0, right: 0, top: 0, bottom: 0,\n    backgroundColor: '#00000080',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label_box_container: {\n    position: 'absolute',\n    left: 0, right: 0, top: 0, bottom: 0\n  },\n  label_box: {\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#ffffff50'\n  }\n}));\n\nconst SERVER_URL = \"\";\n\nfunction App() {\n  const classes = useStyles();\n  const [step, setStep] = React.useState(1);\n  const [file, setFile] = React.useState();\n  const [fileURL, setFileURL] = React.useState();\n  const [isUploading, setUploading] = React.useState(false);\n  const [result, setResult] = React.useState();\n  let fileInputRef;\n\n  const handleFileChange = (e) => {\n    let f = e.target.files[0];\n    setFile(f);\n    setUploading(false);\n    setResult(false);\n    if (fileURL !== \"\")\n      URL.revokeObjectURL(fileURL);\n\n    setFileURL(f ? URL.createObjectURL(f) : \"\");\n    setStep(f ? 2 : 1);\n  };\n\n  const handleSubmit = () => {\n    if (!isUploading) {\n      // Upload image to server\n      setUploading(true);\n      let data = new FormData();\n      data.append('image', file);\n      fetch(SERVER_URL + \"/api/detect\", { method: 'POST', body: data })\n        .then(response => response.json())\n        .then(response => {\n          setStep(3);\n          setUploading(false);\n          // Start polling every 5s for result\n          let interval = setInterval(async () => {\n            try {\n              let result = await fetch(`${SERVER_URL}/api/results?job_id=${response.job_id}`).then(r => r.json());\n              if (result.completed) {\n                setResult(result);\n                clearInterval(interval);\n              }\n            }\n            catch (err) {\n              alert('Something went wrong. Please try again later.');\n              clearInterval(interval);\n              setStep(2);\n            }\n          }, 5000)\n        })\n        .catch(() => {\n          alert(\"Couldn't connect to server. Make sure the server is running and try again.\")\n          setUploading(false);\n        });\n    }\n  };\n\n  const startOver = () => {\n    fileInputRef.value = null;\n    handleFileChange({ target: fileInputRef });\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <div className={classes.appBarIcon}>\n            <Icon>blur_on</Icon>\n          </div>\n          <Typography variant=\"h6\" className={classes.title}>\n            AI - Multiple Object Recognition\n          </Typography>\n          <div style={{ marginLeft: 'auto' }}>\n            <Typography variant=\"h6\" style={{ opacity: 0.8 }}>\n              {'By Joseph Edusei & Ofoe Agbettor'}\n            </Typography>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.container}>\n        <Typography variant=\"h6\" className={classes.stepTitle}>\n          1. Select Image\n        </Typography>\n        <input type='file' accept='image/*' onChange={handleFileChange} disabled={step > 2} ref={ref => fileInputRef = ref} />\n        {file &&\n          <>\n            <img src={fileURL} alt=\"\" className={classes.img} />\n            <Typography variant=\"h6\" className={classes.stepTitle}>\n              2. Upload Image\n            </Typography>\n          </>\n        }\n        {((step === 2 && !isUploading) || (step > 2)) &&\n          <Button variant=\"contained\" color=\"primary\" disabled={step !== 2} onClick={handleSubmit}>\n            Upload\n          </Button>\n        }\n        {file && isUploading && !result &&\n          <Button variant=\"contained\" color=\"primary\" disabled>\n            <span> <Bounce size={15} color=\"#fff\" /></span>\n          </Button>\n        }\n        {step === 3 &&\n          <Typography variant=\"h6\" className={classes.stepTitle}>\n            3. View Result\n          </Typography>\n        }\n        {step === 3 && (() =>\n          <div className={classes.img} style={{ position: 'relative' }}>\n            <img src={fileURL} alt=\"\" />\n            {!result ?\n              <div className={classes.placeholder_img_overlay}>\n                <Spinner size={20} color='#fff' />\n              </div>\n              : [\n                <div key={0} className={classes.label_box_container}>\n                  {result.labels.map((l, i) =>\n                    <LabelledBox className={classes.label_box} key={String(i)} label={`${l} ${(result.scores[i] * 100).toFixed(2)}%`} coords={result.boxes[i]} />\n                  )}\n                </div>\n              ]\n            }\n          </div>\n        )()}\n        {step === 3 &&\n          <div style={{ marginTop: 30 }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={startOver}>\n              Start Over\n            </Button>\n          </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction LabelledBox({ label, coords, className }) {\n  return (\n    <div className={className} style={{ position: 'absolute', left: coords[0], top: coords[1], width: coords[2] - coords[0], height: coords[3] - coords[1] }}>\n      <span style={{ backgroundColor: '#ffffff80', padding: '0 5px 5px 5px' }}>{label}</span>\n    </div>\n  );\n}\n\nexport default App;",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}