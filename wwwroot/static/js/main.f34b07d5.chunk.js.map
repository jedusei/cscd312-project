{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","appBarIcon","display","marginRight","spacing","title","container","flexDirection","alignItems","paddingTop","paddingBottom","stepTitle","width","marginTop","marginBottom","img","placeholder_img_overlay","position","left","right","top","bottom","backgroundColor","justifyContent","label_box_container","label_box","borderStyle","borderWidth","borderColor","LabelledBox","label","coords","className","style","height","lineHeight","padding","whiteSpace","App","fileInputRef","classes","React","useState","step","setStep","file","setFile","fileURL","setFileURL","isUploading","setUploading","result","setResult","handleFileChange","e","f","target","files","URL","revokeObjectURL","createObjectURL","AppBar","Toolbar","Icon","Typography","variant","marginLeft","opacity","type","accept","onChange","disabled","ref","src","alt","Button","color","onClick","data","FormData","append","fetch","method","body","then","response","json","interval","setInterval","a","job_id","r","completed","clearInterval","alert","catch","size","key","labels","map","l","i","scores","String","toFixed","boxes","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f34b07d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Bounce, Spinner } from 'react-activity';\r\nimport 'react-activity/dist/react-activity.css';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appBarIcon: {\r\n    display: 'flex',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    paddingTop: 50,\r\n    paddingBottom: 50\r\n  },\r\n  stepTitle: {\r\n    width: '30%',\r\n    marginTop: 20,\r\n    marginBottom: 10\r\n  },\r\n  img: {\r\n    marginTop: 10\r\n  },\r\n  placeholder_img_overlay: {\r\n    position: 'absolute',\r\n    left: 0, right: 0, top: 0, bottom: 0,\r\n    backgroundColor: '#00000080',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  label_box_container: {\r\n    position: 'absolute',\r\n    left: 0, right: 0, top: 0, bottom: 0\r\n  },\r\n  label_box: {\r\n    borderStyle: 'solid',\r\n    borderWidth: 2,\r\n    borderColor: '#ffffff50'\r\n  }\r\n}));\r\n\r\nconst SERVER_URL = \"\";\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [step, setStep] = React.useState(1);\r\n  const [file, setFile] = React.useState();\r\n  const [fileURL, setFileURL] = React.useState();\r\n  const [isUploading, setUploading] = React.useState(false);\r\n  const [result, setResult] = React.useState();\r\n  let fileInputRef;\r\n\r\n  const handleFileChange = (e) => {\r\n    let f = e.target.files[0];\r\n    setFile(f);\r\n    setUploading(false);\r\n    setResult(false);\r\n    if (fileURL !== \"\")\r\n      URL.revokeObjectURL(fileURL);\r\n\r\n    setFileURL(f ? URL.createObjectURL(f) : \"\");\r\n    setStep(f ? 2 : 1);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!isUploading) {\r\n      // Upload image to server\r\n      setUploading(true);\r\n      let data = new FormData();\r\n      data.append('image', file);\r\n      fetch(SERVER_URL + \"/api/detect\", { method: 'POST', body: data })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n          setStep(3);\r\n          setUploading(false);\r\n          // Start polling every 5s for result\r\n          let interval = setInterval(async () => {\r\n            try {\r\n              let result = await fetch(`${SERVER_URL}/api/results?job_id=${response.job_id}`).then(r => r.json());\r\n              if (result.completed) {\r\n                setResult(result);\r\n                clearInterval(interval);\r\n              }\r\n            }\r\n            catch (err) {\r\n              alert('Something went wrong. Please try again later.');\r\n              clearInterval(interval);\r\n              setStep(2);\r\n            }\r\n          }, 5000)\r\n        })\r\n        .catch(() => {\r\n          alert(\"Couldn't connect to server. Make sure the server is running and try again.\")\r\n          setUploading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const startOver = () => {\r\n    fileInputRef.value = null;\r\n    handleFileChange({ target: fileInputRef });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div className={classes.appBarIcon}>\r\n            <Icon>blur_on</Icon>\r\n          </div>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            AI - Multiple Object Recognition\r\n          </Typography>\r\n          <div style={{ marginLeft: 'auto' }}>\r\n            <Typography variant=\"h6\" style={{ opacity: 0.8 }}>\r\n              {'By Joseph Edusei & Ofoe Agbettor'}\r\n            </Typography>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.container}>\r\n        <Typography variant=\"h6\" className={classes.stepTitle}>\r\n          1. Select Image\r\n        </Typography>\r\n        <input type='file' accept='image/*' onChange={handleFileChange} disabled={step > 2} ref={ref => fileInputRef = ref} />\r\n        {file &&\r\n          <>\r\n            <img src={fileURL} alt=\"\" className={classes.img} />\r\n            <Typography variant=\"h6\" className={classes.stepTitle}>\r\n              2. Upload Image\r\n            </Typography>\r\n          </>\r\n        }\r\n        {((step === 2 && !isUploading) || (step > 2)) &&\r\n          <Button variant=\"contained\" color=\"primary\" disabled={step !== 2} onClick={handleSubmit}>\r\n            Upload\r\n          </Button>\r\n        }\r\n        {file && isUploading && !result &&\r\n          <Button variant=\"contained\" color=\"primary\" disabled>\r\n            <span> <Bounce size={15} color=\"#fff\" /></span>\r\n          </Button>\r\n        }\r\n        {step === 3 &&\r\n          <Typography variant=\"h6\" className={classes.stepTitle}>\r\n            3. View Result\r\n          </Typography>\r\n        }\r\n        {step === 3 && (() =>\r\n          <div className={classes.img} style={{ position: 'relative' }}>\r\n            <img src={fileURL} alt=\"\" />\r\n            {!result ?\r\n              <div className={classes.placeholder_img_overlay}>\r\n                <Spinner size={20} color='#fff' />\r\n              </div>\r\n              : [\r\n                <div key={0} className={classes.label_box_container}>\r\n                  {result.labels.map((l, i) => (result.scores[i] > 0.4) &&\r\n                    <LabelledBox className={classes.label_box} key={String(i)} label={`${l} (${(result.scores[i] * 100).toFixed(2)}%)`} coords={result.boxes[i]} />\r\n                  )}\r\n                </div>\r\n              ]\r\n            }\r\n          </div>\r\n        )()}\r\n        {step === 3 &&\r\n          <div style={{ marginTop: 30 }}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={startOver}>\r\n              Start Over\r\n            </Button>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LabelledBox({ label, coords, className }) {\r\n  return (\r\n    <div className={className} style={{ position: 'absolute', left: coords[0], top: coords[1], width: coords[2] - coords[0], height: coords[3] - coords[1] }}>\r\n      <span style={{ position: 'absolute', left: -2, top: -24, backgroundColor: '#ffffffcc', lineHeight: '14px', padding: '5px', whiteSpace: 'nowrap' }}>{label}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}